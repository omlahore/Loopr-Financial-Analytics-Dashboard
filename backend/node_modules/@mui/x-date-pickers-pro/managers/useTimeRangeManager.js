"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTimeRangeManager = useTimeRangeManager;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _hooks = require("@mui/x-date-pickers/hooks");
var _internals = require("@mui/x-date-pickers/internals");
var _valueManagers = require("../internals/utils/valueManagers");
var _validation = require("../validation");
var _dateUtils = require("../internals/utils/date-utils");
function useTimeRangeManager(parameters = {}) {
  const {
    enableAccessibleFieldDOMStructure = true,
    dateSeparator,
    ampm
  } = parameters;
  return React.useMemo(() => ({
    valueType: 'time',
    validator: _validation.validateTimeRange,
    internal_valueManager: _valueManagers.rangeValueManager,
    internal_fieldValueManager: (0, _valueManagers.getRangeFieldValueManager)({
      dateSeparator
    }),
    internal_enableAccessibleFieldDOMStructure: enableAccessibleFieldDOMStructure,
    internal_useApplyDefaultValuesToFieldInternalProps: useApplyDefaultValuesToTimeRangeFieldInternalProps,
    internal_useOpenPickerButtonAriaLabel: createUseOpenPickerButtonAriaLabel(ampm)
  }), [enableAccessibleFieldDOMStructure, dateSeparator, ampm]);
}
function createUseOpenPickerButtonAriaLabel(ampm) {
  return function useOpenPickerButtonAriaLabel(value) {
    const utils = (0, _internals.useUtils)();
    const translations = (0, _hooks.usePickerTranslations)();
    return React.useMemo(() => {
      const formatKey = ampm ?? utils.is12HourCycleInCurrentLocale() ? 'fullTime12h' : 'fullTime24h';
      return translations.openRangePickerDialogue((0, _dateUtils.formatRange)(utils, value, formatKey));
    }, [value, translations, utils]);
  };
}
function useApplyDefaultValuesToTimeRangeFieldInternalProps(internalProps) {
  const utils = (0, _internals.useUtils)();
  const validationProps = (0, _internals.useApplyDefaultValuesToTimeValidationProps)(internalProps);
  const ampm = React.useMemo(() => internalProps.ampm ?? utils.is12HourCycleInCurrentLocale(), [internalProps.ampm, utils]);
  return React.useMemo(() => (0, _extends2.default)({}, internalProps, validationProps, {
    format: internalProps.format ?? (ampm ? utils.formats.fullTime12h : utils.formats.fullTime24h)
  }), [internalProps, validationProps, ampm, utils]);
}